png(file = paste(temp_currentdir, "PCA-",colnames(Pheno_df)[i],".png", sep = ""),	width = 1024, height = 1024)
print(autoplot(prcomp(t(mydata)),scale = T,col=Pheno_df[,i], main = paste("PCA of mydata;",colnames(Pheno_df)[i])))  # Creates error as it does not like lists as colors, but works anyway
dev.off()
})
}
dev.off()
for (i in 1:dim(Pheno_df)[2]){
# Make Boxplot (figure 1/7)
try({
png(file = paste(temp_currentdir, "boxplot-",colnames(Pheno_df)[i],".png", sep = ""),	width = 1024, height = 1024)
boxplot(mydata, col = Pheno_df[,i], main = paste("Boxplot of mydata;",colnames(Pheno_df)[i]), las = 3)
legend(x = "topright", legend = unique(Pheno_df[,i]),
fill = unique(Pheno_df[,i]), cex = 0.9)
})
dev.off()
# Make PCA plot (figure 3/7)
try({
png(file = paste(temp_currentdir, "PCA-",colnames(Pheno_df)[i],".png", sep = ""),	width = 1024, height = 1024)
print(autoplot(prcomp(t(mydata)),scale = T,col=Pheno_df[,i], main = paste("PCA of mydata;",colnames(Pheno_df)[i])))  # Creates error as it does not like lists as colors, but works anyway
})
dev.off()
}
a=prcomp(t(mydata))
temp_PCA = prcomp(t(mydata))
cor(temp_PCA, Pheno_df)
cor(temp_PCA, Pheno_df[1,])
cor(temp_PCA, Pheno_df[,1])
cor(temp_PCA,Pheno_df,use="complete.obs")
cor(temp_PCA,Pheno_df[,2],use="complete.obs")
cor(temp_PCA,Pheno_df[,1],use="complete.obs")
cor(temp_PCA,Pheno_df[1,],use="complete.obs")
temp_PCA
temp_PCA$x
cor(temp_PCA$x,Pheno_df[1,],use="complete.obs")
cor(temp_PCA$x,Pheno_df[,1],use="complete.obs")
cor(temp_PCA$x,Pheno_df[,2],use="complete.obs")
cor(temp_PCA,Pheno_df,use="pairwise.complete.obs")
cor(temp_PCA$x,Pheno_df,use="pairwise.complete.obs")
cor(temp_PCA$x,Pheno_df[,1],use="pairwise.complete.obs")
Pheno_df[,1]
Pheno_df
Pheno_df[1]
as.numeric(Pheno_df)
as.numeric(Pheno_df[1])
as.numeric(Pheno_df[,1])
as.numeric(Pheno_df[2])
as.numeric(Pheno_df[,2])
as.numeric(Pheno_df[,1])
(Pheno_df[,1])
as.matrix(Pheno_df[,1])
as.numeric(as.matrix(Pheno_df[,1]))
cor(temp_PCA$x,as.numeric(as.matrix(Pheno_df[,1])),use="pairwise.complete.obs")
PCAtraits = Pheno_df
PCAResults = temp_PCA
CorPCATrait5 = cor(PCAResults$x[,c(1:5)],PCAtraits,use="pairwise.complete.obs")
print(heatmap.2(CorPCATrait5,col=redgreen(100)))
# Make PhenoCor plot (figure 2/7) Only indicative!
try({
png(file = paste(temp_currentdir, "PCA-cor-Pheno",colnames(Pheno_df)[i],".png", sep = ""),	width = 1024, height = 1024)
PCAResults = temp_PCA
PCAtraits = Pheno_df
CorPCATrait5 = cor(PCAResults$x[,c(1:5)],PCAtraits,use="pairwise.complete.obs")
print(heatmap.2(CorPCATrait5,col=redgreen(100)))
})
dev.off()
M<-cor(mydata)
corrplot(M, type="upper")
# Set the top root folder (/My-project)
setwd(s_rootFolder)
# Loads packages and data
source("./R/1-load.R")
# Loads required custom functions
source("./R/2-functions.R")
# Creates QC plots and data cleanup (outliers)
source("./R/3-data-cleanup.R")
for (i in 1:dim(Pheno_df)[2]){
# Make Boxplot
tryCatch({
png(file = paste(temp_currentdir, "boxplot-",colnames(Pheno_df)[i],".png", sep = ""),	width = 1024, height = 1024)
boxplot(mydata, col = Pheno_df[,i], main = paste("Boxplot of mydata;",colnames(Pheno_df)[i]), las = 3)
legend(x = "topright", legend = unique(Pheno_df[,i]),
fill = unique(Pheno_df[,i]), cex = 0.9)
dev.off()
})
# Make PCA plot
tryCatch({
temp_PCA = prcomp(t(mydata))
png(file = paste(temp_currentdir, "pca-",colnames(Pheno_df)[i],".png", sep = ""),	width = 1024, height = 1024)
print(autoplot(temp_PCA,scale = T,col=Pheno_df[,i], main = paste("PCA of mydata;",colnames(Pheno_df)[i])))  # Creates error as it does not like lists as colors, but works anyway
dev.off()
})
}
tryCatch({
png(file = paste(temp_currentdir, "boxplot-",colnames(Pheno_df)[i],".png", sep = ""),	width = 1024, height = 1024)
boxplot(mydata, col = Pheno_df[,i], main = paste("Boxplot of mydata;",colnames(Pheno_df)[i]), las = 3)
legend(x = "topright", legend = unique(Pheno_df[,i]),
fill = unique(Pheno_df[,i]), cex = 0.9)
dev.off()
},error ="")
dev.off
i=1
tryCatch({
png(file = paste(temp_currentdir, "boxplot-",colnames(Pheno_df)[i],".png", sep = ""),	width = 1024, height = 1024)
boxplot(mydata, col = Pheno_df[,i], main = paste("Boxplot of mydata;",colnames(Pheno_df)[i]), las = 3)
legend(x = "topright", legend = unique(Pheno_df[,i]),
fill = unique(Pheno_df[,i]), cex = 0.9)
dev.off()
},error ="")
i=2
tryCatch({
png(file = paste(temp_currentdir, "boxplot-",colnames(Pheno_df)[i],".png", sep = ""),	width = 1024, height = 1024)
boxplot(mydata, col = Pheno_df[,i], main = paste("Boxplot of mydata;",colnames(Pheno_df)[i]), las = 3)
legend(x = "topright", legend = unique(Pheno_df[,i]),
fill = unique(Pheno_df[,i]), cex = 0.9)
dev.off()
},error ="")
tryCatch({
temp_PCA = prcomp(t(mydata))
png(file = paste(temp_currentdir, "pca-",colnames(Pheno_df)[i],".png", sep = ""),	width = 1024, height = 1024)
print(autoplot(temp_PCA,scale = T,col=Pheno_df[,i], main = paste("PCA of mydata;",colnames(Pheno_df)[i])))  # Creates error as it does not like lists as colors, but works anyway
dev.off()
},error ="")
dev.off()
dev.off()
dev.off()
dev.off()
tryCatch({
temp_PCA = prcomp(t(mydata))
png(file = paste(temp_currentdir, "pca-",colnames(Pheno_df)[i],".png", sep = ""),	width = 1024, height = 1024)
print(autoplot(temp_PCA,scale = T,col=Pheno_df[,i], main = paste("PCA of mydata;",colnames(Pheno_df)[i])))  # Creates error as it does not like lists as colors, but works anyway
dev.off()
},error ="")
tryCatch({
a=15
}, warning = function(w) {
print("warning")
}, error = function(e) {
print("error")
}, finally = {
print("pass")
}
a
tryCatch({ a=15
}, warning = function(w) { print("warning")}, error = function(e) {print("error")}, finally = { print(a)}
tryCatch({ a=15
}, warning = function(w) { print("warning")}, error = function(e) {print("error")}, finally = { print(a)}
)
tryCatch({ a=15
}, warning = function(w) { print("warning")}, error = function(e) {print("error")}, finally = { print(a)})
tryCatch({ a=a-a
}, warning = function(w) { print("warning")}, error = function(e) {print("error")}, finally = { print(a)})
tryCatch({ a=a-a
}, warning = function(w) { print("warning")}, error = function(e) {print("error")}, finally = { print(a)})
tryCatch({ a=a-a+"sda"
}, warning = function(w) { print("warning")}, error = function(e) {print("error")}, finally = { print(a)})
tryCatch({
reportervariable = 0
boxplot(mydata, col = Pheno_df[,i], main = paste("Boxplot of mydata;",colnames(Pheno_df)[i]), las = 3)
}, warning = function(w) {
reportervariable = 1
}, error = function(e) {
reportervariable = 1
}, finally = {
if(reportervariable == 0){
png(file = paste(temp_currentdir, "boxplot-",colnames(Pheno_df)[i],".png", sep = ""),	width = 1024, height = 1024)
boxplot(mydata, col = Pheno_df[,i], main = paste("Boxplot of mydata;",colnames(Pheno_df)[i]), las = 3)
legend(x = "topright", legend = unique(Pheno_df[,i]),
fill = unique(Pheno_df[,i]), cex = 0.9)
}
})
dev.off()
dev.off()
dev.off()
dev.off()
dev.off()
for (i in 1:dim(Pheno_df)[2]){
# Make Boxplot
tryCatch({
reportervariable = 0
boxplot(mydata, col = Pheno_df[,i], main = paste("Boxplot of mydata;",colnames(Pheno_df)[i]), las = 3)
}, warning = function(w) {
reportervariable = 1
}, error = function(e) {
reportervariable = 1
}, finally = {
if(reportervariable == 0){
png(file = paste(temp_currentdir, "boxplot-",colnames(Pheno_df)[i],".png", sep = ""),	width = 1024, height = 1024)
boxplot(mydata, col = Pheno_df[,i], main = paste("Boxplot of mydata;",colnames(Pheno_df)[i]), las = 3)
legend(x = "topright", legend = unique(Pheno_df[,i]),
fill = unique(Pheno_df[,i]), cex = 0.9)
}
})
# Make PCA plot
tryCatch({
reportervariable = 0
print(autoplot(temp_PCA,scale = T,col=Pheno_df[,i], main = paste("PCA of mydata;",colnames(Pheno_df)[i])))
}, warning = function(w) {
reportervariable = 1
}, error = function(e) {
reportervariable = 1
}, finally = {
if(reportervariable == 0){
png(file = paste(temp_currentdir, "pca-",colnames(Pheno_df)[i],".png", sep = ""),	width = 1024, height = 1024)
print(autoplot(temp_PCA,scale = T,col=Pheno_df[,i], main = paste("PCA of mydata;",colnames(Pheno_df)[i])))  # Creates error as it does not like lists as colors, but works anyway
dev.off()
}
})
}
dev.off()
dev.off()
dev.off()
dev.off()
for (i in 1:dim(Pheno_df)[2]){
# Make Boxplot
tryCatch({
reportervariable = 0
boxplot(mydata, col = Pheno_df[,i], main = paste("Boxplot of mydata;",colnames(Pheno_df)[i]), las = 3)
}, warning = function(w) {
reportervariable = 1
}, error = function(e) {
reportervariable = 1
}, finally = {
if(reportervariable == 0){
png(file = paste(temp_currentdir, "boxplot-",colnames(Pheno_df)[i],".png", sep = ""),	width = 1024, height = 1024)
boxplot(mydata, col = Pheno_df[,i], main = paste("Boxplot of mydata;",colnames(Pheno_df)[i]), las = 3)
legend(x = "topright", legend = unique(Pheno_df[,i]),
fill = unique(Pheno_df[,i]), cex = 0.9)
}
dev.off()
})
# Make PCA plot
tryCatch({
reportervariable = 0
print(autoplot(temp_PCA,scale = T,col=Pheno_df[,i], main = paste("PCA of mydata;",colnames(Pheno_df)[i])))
}, warning = function(w) {
reportervariable = 1
}, error = function(e) {
reportervariable = 1
}, finally = {
if(reportervariable == 0){
png(file = paste(temp_currentdir, "pca-",colnames(Pheno_df)[i],".png", sep = ""),	width = 1024, height = 1024)
print(autoplot(temp_PCA,scale = T,col=Pheno_df[,i], main = paste("PCA of mydata;",colnames(Pheno_df)[i])))  # Creates error as it does not like lists as colors, but works anyway
}
dev.off()
})
}
dev.off()
dev.off()
tryCatch({
reportervariable = 0
print(autoplot(temp_PCA,scale = T,col=Pheno_df[,i], main = paste("PCA of mydata;",colnames(Pheno_df)[i])))
}, warning = function(w) {
reportervariable = 1
}, error = function(e) {
reportervariable = 1
}, finally = {
if(reportervariable == 0){
png(file = paste(temp_currentdir, "pca-",colnames(Pheno_df)[i],".png", sep = ""),	width = 1024, height = 1024)
print(autoplot(temp_PCA,scale = T,col=Pheno_df[,i], main = paste("PCA of mydata;",colnames(Pheno_df)[i])))  # Creates error as it does not like lists as colors, but works anyway
}
dev.off()
})
for (i in 1:dim(Pheno_df)[2]){
# Make Boxplot
tryCatch({
reportervariable = 0
boxplot(mydata, col = Pheno_df[,i], main = paste("Boxplot of mydata;",colnames(Pheno_df)[i]), las = 3)
}, warning = function(w) {
assign("reportervariable", 1, envir = .GlobalEnv)
}, error = function(e) {
assign("reportervariable", 1, envir = .GlobalEnv)
}, finally = {
if(reportervariable == 0){
png(file = paste(temp_currentdir, "boxplot-",colnames(Pheno_df)[i],".png", sep = ""),	width = 1024, height = 1024)
boxplot(mydata, col = Pheno_df[,i], main = paste("Boxplot of mydata;",colnames(Pheno_df)[i]), las = 3)
legend(x = "topright", legend = unique(Pheno_df[,i]),
fill = unique(Pheno_df[,i]), cex = 0.9)
}
dev.off()
})
# Make PCA plot
tryCatch({
reportervariable = 0
print(autoplot(temp_PCA,scale = T,col=Pheno_df[,i], main = paste("PCA of mydata;",colnames(Pheno_df)[i])))
}, warning = function(w) {
assign("reportervariable", 1, envir = .GlobalEnv)
}, error = function(e) {
assign("reportervariable", 1, envir = .GlobalEnv)
}, finally = {
if(reportervariable == 0){
png(file = paste(temp_currentdir, "pca-",colnames(Pheno_df)[i],".png", sep = ""),	width = 1024, height = 1024)
print(autoplot(temp_PCA,scale = T,col=Pheno_df[,i], main = paste("PCA of mydata;",colnames(Pheno_df)[i])))  # Creates error as it does not like lists as colors, but works anyway
}
dev.off()
})
}
dev.off()
dev.off()
for (i in 1:dim(Pheno_df)[2]){
# Make Boxplot
tryCatch({
reportervariable = 0
boxplot(mydata, col = Pheno_df[,i], main = paste("Boxplot of mydata;",colnames(Pheno_df)[i]), las = 3)
}, warning = function(w) {
assign("reportervariable", 1, envir = .GlobalEnv)
}, error = function(e) {
assign("reportervariable", 1, envir = .GlobalEnv)
}, finally = {
if(reportervariable == 0){
png(file = paste(temp_currentdir, "boxplot-",colnames(Pheno_df)[i],".png", sep = ""),	width = 1024, height = 1024)
boxplot(mydata, col = Pheno_df[,i], main = paste("Boxplot of mydata;",colnames(Pheno_df)[i]), las = 3)
legend(x = "topright", legend = unique(Pheno_df[,i]),
fill = unique(Pheno_df[,i]), cex = 0.9)
}
dev.off()
})
# Make PCA plot
tryCatch({
reportervariable = 0
print(autoplot(temp_PCA,scale = T,col=Pheno_df[,i], main = paste("PCA of mydata;",colnames(Pheno_df)[i])))
}, warning = function(w) {
assign("reportervariable", 1, envir = .GlobalEnv)
}, error = function(e) {
assign("reportervariable", 1, envir = .GlobalEnv)
}, finally = {
if(reportervariable == 0){
png(file = paste(temp_currentdir, "pca-",colnames(Pheno_df)[i],".png", sep = ""),	width = 1024, height = 1024)
print(autoplot(temp_PCA,scale = T,col=Pheno_df[,i], main = paste("PCA of mydata;",colnames(Pheno_df)[i])))  # Creates error as it does not like lists as colors, but works anyway
}
dev.off()
})
}
temp_PCA = prcomp(t(mydata))
for (i in 1:dim(Pheno_df)[2]){
# Make Boxplot
tryCatch({
reportervariable = 0
boxplot(mydata, col = Pheno_df[,i], main = paste("Boxplot of mydata;",colnames(Pheno_df)[i]), las = 3)
}, warning = function(w) {
assign("reportervariable", 1, envir = .GlobalEnv)
}, error = function(e) {
assign("reportervariable", 1, envir = .GlobalEnv)
}, finally = {
if(reportervariable == 0){
png(file = paste(temp_currentdir, "boxplot-",colnames(Pheno_df)[i],".png", sep = ""),	width = 1024, height = 1024)
boxplot(mydata, col = Pheno_df[,i], main = paste("Boxplot of mydata;",colnames(Pheno_df)[i]), las = 3)
legend(x = "topright", legend = unique(Pheno_df[,i]),
fill = unique(Pheno_df[,i]), cex = 0.9)
}
dev.off()
})
# Make PCA plot
tryCatch({
reportervariable = 0
print(autoplot(temp_PCA,scale = T,col=Pheno_df[,i], main = paste("PCA of mydata;",colnames(Pheno_df)[i])))
}, warning = function(w) {
assign("reportervariable", 1, envir = .GlobalEnv)
}, error = function(e) {
assign("reportervariable", 1, envir = .GlobalEnv)
}, finally = {
if(reportervariable == 0){
png(file = paste(temp_currentdir, "pca-",colnames(Pheno_df)[i],".png", sep = ""),	width = 1024, height = 1024)
print(autoplot(temp_PCA,scale = T,col=Pheno_df[,i], main = paste("PCA of mydata;",colnames(Pheno_df)[i])))  # Creates error as it does not like lists as colors, but works anyway
}
dev.off()
})
}
+
temp_PCA = prcomp(t(mydata))
for (i in 1:dim(Pheno_df)[2]){
# Make Boxplot
tryCatch({
reportervariable = 0
boxplot(mydata, col = Pheno_df[,i], main = paste("Boxplot of mydata;",colnames(Pheno_df)[i]), las = 3)
}, warning = function(w) {
assign("reportervariable", 1, envir = .GlobalEnv)
}, error = function(e) {
assign("reportervariable", 1, envir = .GlobalEnv)
}, finally = {
if(reportervariable == 0){
png(file = paste(temp_currentdir, "boxplot-",colnames(Pheno_df)[i],".png", sep = ""),	width = 1024, height = 1024)
boxplot(mydata, col = Pheno_df[,i], main = paste("Boxplot of mydata;",colnames(Pheno_df)[i]), las = 3)
legend(x = "topright", legend = unique(Pheno_df[,i]),
fill = unique(Pheno_df[,i]), cex = 0.9)
}
dev.off()
})
# Make PCA plot
tryCatch({
reportervariable = 0
print(autoplot(temp_PCA,scale = T,col=Pheno_df[,i], main = paste("PCA of mydata;",colnames(Pheno_df)[i])))
}, warning = function(w) {
#assign("reportervariable", 1, envir = .GlobalEnv)
}, error = function(e) {
assign("reportervariable", 1, envir = .GlobalEnv)
}, finally = {
if(reportervariable == 0){
png(file = paste(temp_currentdir, "pca-",colnames(Pheno_df)[i],".png", sep = ""),	width = 1024, height = 1024)
print(autoplot(temp_PCA,scale = T,col=Pheno_df[,i], main = paste("PCA of mydata;",colnames(Pheno_df)[i])))  # Creates error as it does not like lists as colors, but works anyway
}
dev.off()
})
}
dev.off()
dev.off()
dev.off()
temp_PCA = prcomp(t(mydata))
for (i in 1:dim(Pheno_df)[2]){
# Make Boxplot
tryCatch({
reportervariable = 0
boxplot(mydata, col = Pheno_df[,i], main = paste("Boxplot of mydata;",colnames(Pheno_df)[i]), las = 3)
}, warning = function(w) {
assign("reportervariable", 1, envir = .GlobalEnv)
}, error = function(e) {
assign("reportervariable", 1, envir = .GlobalEnv)
}, finally = {
if(reportervariable == 0){
png(file = paste(temp_currentdir, "boxplot-",colnames(Pheno_df)[i],".png", sep = ""),	width = 1024, height = 1024)
boxplot(mydata, col = Pheno_df[,i], main = paste("Boxplot of mydata;",colnames(Pheno_df)[i]), las = 3)
legend(x = "topright", legend = unique(Pheno_df[,i]),
fill = unique(Pheno_df[,i]), cex = 0.9)
}
dev.off()
})
# Make PCA plot
tryCatch({
reportervariable = 0
print(autoplot(temp_PCA,scale = T,col=Pheno_df[,i], main = paste("PCA of mydata;",colnames(Pheno_df)[i])))
}, error = function(e) {
assign("reportervariable", 1, envir = .GlobalEnv)
}, finally = {
if(reportervariable == 0){
png(file = paste(temp_currentdir, "pca-",colnames(Pheno_df)[i],".png", sep = ""),	width = 1024, height = 1024)
print(autoplot(temp_PCA,scale = T,col=Pheno_df[,i], main = paste("PCA of mydata;",colnames(Pheno_df)[i])))  # Creates error as it does not like lists as colors, but works anyway
}
dev.off()
})
}
e.
else if (condition) {
}
e
# Set the top root folder (/My-project)
setwd(s_rootFolder)
# Loads packages and data
source("./R/1-load.R")
# Loads required custom functions
source("./R/2-functions.R")
# Creates QC plots and data cleanup (outliers)
source("./R/3-data-cleanup.R")
corrplot(cor(mydata), type="upper")
# Make Correlation plot
try({
png(file = paste(temp_currentdir, "cor-",colnames(Pheno_df)[i],".png", sep = ""),	width = 1024, height = 1024)
print(corrplot(cor(mydata), type="upper"))
dev.off()
})
normalizeQuantiles
mydataNorm <- normalizeQuantiles(mydata)
temp_PCA = prcomp(t(mydataNorm))
for (i in 1:dim(Pheno_df)[2]){
# Make Boxplot
tryCatch({
reportervariable = 0
boxplot(mydataNorm, col = Pheno_df[,i], main = paste("Boxplot of mydataNorm;",colnames(Pheno_df)[i]), las = 3)
}, warning = function(w) {
assign("reportervariable", 1, envir = .GlobalEnv)
}, error = function(e) {
assign("reportervariable", 1, envir = .GlobalEnv)
}, finally = {
if(reportervariable == 0){
png(file = paste(temp_currentdir, "norm-boxplot-",colnames(Pheno_df)[i],".png", sep = ""),	width = 1024, height = 1024)
boxplot(mydataNorm, col = Pheno_df[,i], main = paste("Boxplot of mydataNorm;",colnames(Pheno_df)[i]), las = 3)
legend(x = "topright", legend = unique(Pheno_df[,i]),
fill = unique(Pheno_df[,i]), cex = 0.9)
}
dev.off()
})
# Make PCA plot
tryCatch({
reportervariable = 0
print(autoplot(temp_PCA,scale = T,col=Pheno_df[,i], main = paste("PCA of mydataNorm;",colnames(Pheno_df)[i])))
}, error = function(e) {
assign("reportervariable", 1, envir = .GlobalEnv)
}, finally = {
if(reportervariable == 0){
png(file = paste(temp_currentdir, "norm-pca-",colnames(Pheno_df)[i],".png", sep = ""),	width = 1024, height = 1024)
print(autoplot(temp_PCA,scale = T,col=Pheno_df[,i], main = paste("PCA of mydataNorm;",colnames(Pheno_df)[i])))
}
dev.off()
})
dev.off()
}
dev.off()
#@RRR# Make PhenoCor plot !Only indicative!
if(FALSE){
try({
png(file = paste(temp_currentdir, "norm-pca-cor-Pheno",colnames(Pheno_df)[i],".png", sep = ""),	width = 1024, height = 1024)
PCAResults = temp_PCA
PCAtraits = Pheno_df
CorPCATrait5 = cor(PCAResults$x[,c(1:5)],PCAtraits,use="pairwise.complete.obs")
print(heatmap.2(CorPCATrait5, col=redgreen(100)))
dev.off()
})
}
# Make Correlation plot
try({
png(file = paste(temp_currentdir, "norm-cor-",colnames(Pheno_df)[i],".png", sep = ""),	width = 1024, height = 1024)
print(corrplot(cor(mydataNorm), type="upper"))
dev.off()
})
